#!/usr/bin/python
# -*- coding: utf-8 -*-


import re
import argparse
import json
import os
from tank_api_client.peakscount import PeaksCount


def main():

    parser = argparse.ArgumentParser( \
                description="Вычисление числа таймаутов по phout / jtl логу. "
                            "В случае JMeter предполагается лог "
                            "jmeter*.jtl")
    parser.add_argument('-t', '--logtype', action='store',
                        choices=['jmeter', 'phantom'],
                        help="Тип лога (кастомный JMeter / стандартный "
                        "phout*.log Phantom)", required=True)
    parser.add_argument('-v', '--ver', action='store',
                        help="Версия тестируемого продукта",
                        required=True)
    parser.add_argument('-f', '--fname', action='store',
                        help="Имя файла с логом load tool",
                        required=True)
    parser.add_argument('-c', '--cfg', action='store',
                        help="Конфиг с таймаутами по типам запросов: "
                             "в json формате либо ini-сценарий с "
                             "секцией salts_timeouts.",
                        required=True)

    args = parser.parse_args()
    print "logtype: %s" % args.logtype
    print "ver: %s" % args.ver
    print "fname: %s" % os.path.abspath(args.fname)
    print "cfg: %s" % os.path.abspath(args.cfg)
    thresholds = {}
    try:
        with open(args.cfg, 'r') as cfg_file:
            thresholds = json.loads(cfg_file.read())
    except ValueError:
        import ConfigParser
        config = ConfigParser.ConfigParser()
        config.read(args.cfg)
        try:
            options = config.options('salts_timeouts')
            for opt in options:
                try:
                    thresholds[opt] = float(config.get('salts_timeouts',
                                                       opt))
                except ValueError, err:
                    msg = "ValueError in the 'salts_timeouts.%s' option: "
                    msg += "%s."
                    print msg % (opt, err)
        except ConfigParser.Error, exc:
            print "Error in the %s file. %s." % (args.cfg, exc)

    print "Thresholds: %s" % thresholds

    peaks = PeaksCount(args.ver, args.logtype, args.fname, thresholds)
    report = peaks.get_report('raw')
    print '*' * 50
    print "Raw Report:\n%s" % report
    report = peaks.get_report('jira')
    print '*' * 50
    print "Jira Report:\n%s" % report


if __name__ == '__main__':
    main()
